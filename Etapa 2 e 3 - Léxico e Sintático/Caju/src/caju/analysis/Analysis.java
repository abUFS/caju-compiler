/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.analysis;

import caju.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPrograma(APrograma node);
    void caseADecVariavel(ADecVariavel node);
    void caseAListaNomes(AListaNomes node);
    void caseAVirgulaId(AVirgulaId node);
    void caseABaseTipo(ABaseTipo node);
    void caseAVetorTipo(AVetorTipo node);
    void caseAExpColchete(AExpColchete node);
    void caseANumeroTipoBase(ANumeroTipoBase node);
    void caseACaractereTipoBase(ACaractereTipoBase node);
    void caseABooleanoTipoBase(ABooleanoTipoBase node);
    void caseADecFuncao(ADecFuncao node);
    void caseATipoTipoRetorno(ATipoTipoRetorno node);
    void caseAVazioTipoRetorno(AVazioTipoRetorno node);
    void caseAVazioParametros(AVazioParametros node);
    void caseAParametroParametros(AParametroParametros node);
    void caseAPipeParametro(APipeParametro node);
    void caseAParametro(AParametro node);
    void caseABloco(ABloco node);
    void caseAAtrib(AAtrib node);
    void caseAListaAtrib(AListaAtrib node);
    void caseAVirgulaAtrib(AVirgulaAtrib node);
    void caseACasamComando(ACasamComando node);
    void caseASemCasamComando(ASemCasamComando node);
    void caseASeComandoCasam(ASeComandoCasam node);
    void caseASenaoComandoCasam(ASenaoComandoCasam node);
    void caseAEnquantoComandoCasam(AEnquantoComandoCasam node);
    void caseAParaComandoCasam(AParaComandoCasam node);
    void caseAParaCadaComandoCasam(AParaCadaComandoCasam node);
    void caseASeSenaoComandoSemCasam(ASeSenaoComandoSemCasam node);
    void caseAAtribComandoSemCasam(AAtribComandoSemCasam node);
    void caseARetorneComandoSemCasam(ARetorneComandoSemCasam node);
    void caseABlocoComandoSemCasam(ABlocoComandoSemCasam node);
    void caseAChamadaComandoSemCasam(AChamadaComandoSemCasam node);
    void caseAIdVar(AIdVar node);
    void caseAIndexadaVar(AIndexadaVar node);
    void caseAOuExp(AOuExp node);
    void caseAExp1Exp(AExp1Exp node);
    void caseAEExp1(AEExp1 node);
    void caseAExp1(AExp1 node);
    void caseAIgualExp2(AIgualExp2 node);
    void caseAExp2(AExp2 node);
    void caseAMenorIgualExp3(AMenorIgualExp3 node);
    void caseAExp3(AExp3 node);
    void caseAMaiorIgualExp4(AMaiorIgualExp4 node);
    void caseAExp4(AExp4 node);
    void caseAMenorExp5(AMenorExp5 node);
    void caseAExp5(AExp5 node);
    void caseAMaiorExp6(AMaiorExp6 node);
    void caseAExp6(AExp6 node);
    void caseAMaisExp7(AMaisExp7 node);
    void caseAExp7(AExp7 node);
    void caseAMenosExp8(AMenosExp8 node);
    void caseAExp8(AExp8 node);
    void caseAMultExp9(AMultExp9 node);
    void caseAExp9(AExp9 node);
    void caseADivExp10(ADivExp10 node);
    void caseAExp10(AExp10 node);
    void caseANaoExp11(ANaoExp11 node);
    void caseAExp11(AExp11 node);
    void caseAParentesesExp12(AParentesesExp12 node);
    void caseAExp12(AExp12 node);
    void caseAChamadaExp13(AChamadaExp13 node);
    void caseAVarExp13(AVarExp13 node);
    void caseANumeroExp13(ANumeroExp13 node);
    void caseACaractereExp13(ACaractereExp13 node);
    void caseABooleanoExp13(ABooleanoExp13 node);
    void caseAStringExp13(AStringExp13 node);
    void caseAChamada(AChamada node);
    void caseAVazioListaExp(AVazioListaExp node);
    void caseAListaExpListaExp(AListaExpListaExp node);
    void caseAPipeExp(APipeExp node);

    void caseTIgnorar(TIgnorar node);
    void caseTBaseCaractere(TBaseCaractere node);
    void caseTBaseNumero(TBaseNumero node);
    void caseTBaseBooleano(TBaseBooleano node);
    void caseTVetor(TVetor node);
    void caseTVazio(TVazio node);
    void caseTCaractere(TCaractere node);
    void caseTBooleano(TBooleano node);
    void caseTNumero(TNumero node);
    void caseTVetorUnidimensional(TVetorUnidimensional node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTComentLinha(TComentLinha node);
    void caseTComentBloco(TComentBloco node);
    void caseTEnquanto(TEnquanto node);
    void caseTPara(TPara node);
    void caseTParaCada(TParaCada node);
    void caseTSe(TSe node);
    void caseTSenao(TSenao node);
    void caseTRetorne(TRetorne node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMaior(TMaior node);
    void caseTMenor(TMenor node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTIgual(TIgual node);
    void caseTNao(TNao node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTAtribuir(TAtribuir node);
    void caseTPontoFinal(TPontoFinal node);
    void caseTVirgula(TVirgula node);
    void caseTAbreColchete(TAbreColchete node);
    void caseTFechaColchete(TFechaColchete node);
    void caseTSeta(TSeta node);
    void caseTAbreParenteses(TAbreParenteses node);
    void caseTFechaParenteses(TFechaParenteses node);
    void caseTPipe(TPipe node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
