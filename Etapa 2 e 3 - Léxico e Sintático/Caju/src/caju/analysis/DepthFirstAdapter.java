/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.analysis;

import java.util.*;
import caju.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PDecVariavel> copy = new ArrayList<PDecVariavel>(node.getDecVariavel());
            for(PDecVariavel e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecFuncao> copy = new ArrayList<PDecFuncao>(node.getDecFuncao());
            for(PDecFuncao e : copy)
            {
                e.apply(this);
            }
        }
        outAPrograma(node);
    }

    public void inADecVariavel(ADecVariavel node)
    {
        defaultIn(node);
    }

    public void outADecVariavel(ADecVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVariavel(ADecVariavel node)
    {
        inADecVariavel(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getListaNomes() != null)
        {
            node.getListaNomes().apply(this);
        }
        if(node.getPontoFinal() != null)
        {
            node.getPontoFinal().apply(this);
        }
        outADecVariavel(node);
    }

    public void inAListaNomes(AListaNomes node)
    {
        defaultIn(node);
    }

    public void outAListaNomes(AListaNomes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaNomes(AListaNomes node)
    {
        inAListaNomes(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PVirgulaId> copy = new ArrayList<PVirgulaId>(node.getVirgulaId());
            for(PVirgulaId e : copy)
            {
                e.apply(this);
            }
        }
        outAListaNomes(node);
    }

    public void inAVirgulaId(AVirgulaId node)
    {
        defaultIn(node);
    }

    public void outAVirgulaId(AVirgulaId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgulaId(AVirgulaId node)
    {
        inAVirgulaId(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVirgulaId(node);
    }

    public void inABaseTipo(ABaseTipo node)
    {
        defaultIn(node);
    }

    public void outABaseTipo(ABaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseTipo(ABaseTipo node)
    {
        inABaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outABaseTipo(node);
    }

    public void inAVetorTipo(AVetorTipo node)
    {
        defaultIn(node);
    }

    public void outAVetorTipo(AVetorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorTipo(AVetorTipo node)
    {
        inAVetorTipo(node);
        if(node.getVetor() != null)
        {
            node.getVetor().apply(this);
        }
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        {
            List<PExpColchete> copy = new ArrayList<PExpColchete>(node.getDir());
            for(PExpColchete e : copy)
            {
                e.apply(this);
            }
        }
        outAVetorTipo(node);
    }

    public void inAExpColchete(AExpColchete node)
    {
        defaultIn(node);
    }

    public void outAExpColchete(AExpColchete node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpColchete(AExpColchete node)
    {
        inAExpColchete(node);
        if(node.getAbreColchete() != null)
        {
            node.getAbreColchete().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaColchete() != null)
        {
            node.getFechaColchete().apply(this);
        }
        outAExpColchete(node);
    }

    public void inANumeroTipoBase(ANumeroTipoBase node)
    {
        defaultIn(node);
    }

    public void outANumeroTipoBase(ANumeroTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroTipoBase(ANumeroTipoBase node)
    {
        inANumeroTipoBase(node);
        if(node.getBaseNumero() != null)
        {
            node.getBaseNumero().apply(this);
        }
        outANumeroTipoBase(node);
    }

    public void inACaractereTipoBase(ACaractereTipoBase node)
    {
        defaultIn(node);
    }

    public void outACaractereTipoBase(ACaractereTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipoBase(ACaractereTipoBase node)
    {
        inACaractereTipoBase(node);
        if(node.getBaseCaractere() != null)
        {
            node.getBaseCaractere().apply(this);
        }
        outACaractereTipoBase(node);
    }

    public void inABooleanoTipoBase(ABooleanoTipoBase node)
    {
        defaultIn(node);
    }

    public void outABooleanoTipoBase(ABooleanoTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoTipoBase(ABooleanoTipoBase node)
    {
        inABooleanoTipoBase(node);
        if(node.getBaseBooleano() != null)
        {
            node.getBaseBooleano().apply(this);
        }
        outABooleanoTipoBase(node);
    }

    public void inADecFuncao(ADecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncao(ADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        inADecFuncao(node);
        if(node.getSeta() != null)
        {
            node.getSeta().apply(this);
        }
        if(node.getTipoRetorno() != null)
        {
            node.getTipoRetorno().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outADecFuncao(node);
    }

    public void inATipoTipoRetorno(ATipoTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outATipoTipoRetorno(ATipoTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoTipoRetorno(ATipoTipoRetorno node)
    {
        inATipoTipoRetorno(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoTipoRetorno(node);
    }

    public void inAVazioTipoRetorno(AVazioTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outAVazioTipoRetorno(AVazioTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioTipoRetorno(AVazioTipoRetorno node)
    {
        inAVazioTipoRetorno(node);
        if(node.getVazio() != null)
        {
            node.getVazio().apply(this);
        }
        outAVazioTipoRetorno(node);
    }

    public void inAVazioParametros(AVazioParametros node)
    {
        defaultIn(node);
    }

    public void outAVazioParametros(AVazioParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioParametros(AVazioParametros node)
    {
        inAVazioParametros(node);
        outAVazioParametros(node);
    }

    public void inAParametroParametros(AParametroParametros node)
    {
        defaultIn(node);
    }

    public void outAParametroParametros(AParametroParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroParametros(AParametroParametros node)
    {
        inAParametroParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        {
            List<PPipeParametro> copy = new ArrayList<PPipeParametro>(node.getPipeParametro());
            for(PPipeParametro e : copy)
            {
                e.apply(this);
            }
        }
        outAParametroParametros(node);
    }

    public void inAPipeParametro(APipeParametro node)
    {
        defaultIn(node);
    }

    public void outAPipeParametro(APipeParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPipeParametro(APipeParametro node)
    {
        inAPipeParametro(node);
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAPipeParametro(node);
    }

    public void inAParametro(AParametro node)
    {
        defaultIn(node);
    }

    public void outAParametro(AParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        inAParametro(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParametro(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        {
            List<PDecVariavel> copy = new ArrayList<PDecVariavel>(node.getDecVariavel());
            for(PDecVariavel e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        outABloco(node);
    }

    public void inAAtrib(AAtrib node)
    {
        defaultIn(node);
    }

    public void outAAtrib(AAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtrib(AAtrib node)
    {
        inAAtrib(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAtribuir() != null)
        {
            node.getAtribuir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAtrib(node);
    }

    public void inAListaAtrib(AListaAtrib node)
    {
        defaultIn(node);
    }

    public void outAListaAtrib(AListaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaAtrib(AListaAtrib node)
    {
        inAListaAtrib(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        {
            List<PVirgulaAtrib> copy = new ArrayList<PVirgulaAtrib>(node.getVirgulaAtrib());
            for(PVirgulaAtrib e : copy)
            {
                e.apply(this);
            }
        }
        outAListaAtrib(node);
    }

    public void inAVirgulaAtrib(AVirgulaAtrib node)
    {
        defaultIn(node);
    }

    public void outAVirgulaAtrib(AVirgulaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgulaAtrib(AVirgulaAtrib node)
    {
        inAVirgulaAtrib(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        outAVirgulaAtrib(node);
    }

    public void inACasamComando(ACasamComando node)
    {
        defaultIn(node);
    }

    public void outACasamComando(ACasamComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasamComando(ACasamComando node)
    {
        inACasamComando(node);
        if(node.getComandoCasam() != null)
        {
            node.getComandoCasam().apply(this);
        }
        outACasamComando(node);
    }

    public void inASemCasamComando(ASemCasamComando node)
    {
        defaultIn(node);
    }

    public void outASemCasamComando(ASemCasamComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemCasamComando(ASemCasamComando node)
    {
        inASemCasamComando(node);
        if(node.getComandoSemCasam() != null)
        {
            node.getComandoSemCasam().apply(this);
        }
        outASemCasamComando(node);
    }

    public void inAOutraComando(AOutraComando node)
    {
        defaultIn(node);
    }

    public void outAOutraComando(AOutraComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutraComando(AOutraComando node)
    {
        inAOutraComando(node);
        if(node.getOutras() != null)
        {
            node.getOutras().apply(this);
        }
        outAOutraComando(node);
    }

    public void inASeComandoCasam(ASeComandoCasam node)
    {
        defaultIn(node);
    }

    public void outASeComandoCasam(ASeComandoCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandoCasam(ASeComandoCasam node)
    {
        inASeComandoCasam(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outASeComandoCasam(node);
    }

    public void inASeComandoSemCasam(ASeComandoSemCasam node)
    {
        defaultIn(node);
    }

    public void outASeComandoSemCasam(ASeComandoSemCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandoSemCasam(ASeComandoSemCasam node)
    {
        inASeComandoSemCasam(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outASeComandoSemCasam(node);
    }

    public void inASeSenaoComandoSemCasam(ASeSenaoComandoSemCasam node)
    {
        defaultIn(node);
    }

    public void outASeSenaoComandoSemCasam(ASeSenaoComandoSemCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSenaoComandoSemCasam(ASeSenaoComandoSemCasam node)
    {
        inASeSenaoComandoSemCasam(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComandoCasam() != null)
        {
            node.getComandoCasam().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getComandoSemCasam() != null)
        {
            node.getComandoSemCasam().apply(this);
        }
        outASeSenaoComandoSemCasam(node);
    }

    public void inAEnquantoOutras(AEnquantoOutras node)
    {
        defaultIn(node);
    }

    public void outAEnquantoOutras(AEnquantoOutras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoOutras(AEnquantoOutras node)
    {
        inAEnquantoOutras(node);
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAEnquantoOutras(node);
    }

    public void inAParaOutras(AParaOutras node)
    {
        defaultIn(node);
    }

    public void outAParaOutras(AParaOutras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaOutras(AParaOutras node)
    {
        inAParaOutras(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getEsqLista() != null)
        {
            node.getEsqLista().apply(this);
        }
        if(node.getEsqPonto() != null)
        {
            node.getEsqPonto().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDirPonto() != null)
        {
            node.getDirPonto().apply(this);
        }
        if(node.getDirLista() != null)
        {
            node.getDirLista().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAParaOutras(node);
    }

    public void inAParaCadaOutras(AParaCadaOutras node)
    {
        defaultIn(node);
    }

    public void outAParaCadaOutras(AParaCadaOutras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaCadaOutras(AParaCadaOutras node)
    {
        inAParaCadaOutras(node);
        if(node.getParaCada() != null)
        {
            node.getParaCada().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAParaCadaOutras(node);
    }

    public void inAAtribOutras(AAtribOutras node)
    {
        defaultIn(node);
    }

    public void outAAtribOutras(AAtribOutras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribOutras(AAtribOutras node)
    {
        inAAtribOutras(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getPontoFinal() != null)
        {
            node.getPontoFinal().apply(this);
        }
        outAAtribOutras(node);
    }

    public void inARetorneOutras(ARetorneOutras node)
    {
        defaultIn(node);
    }

    public void outARetorneOutras(ARetorneOutras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetorneOutras(ARetorneOutras node)
    {
        inARetorneOutras(node);
        if(node.getRetorne() != null)
        {
            node.getRetorne().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPontoFinal() != null)
        {
            node.getPontoFinal().apply(this);
        }
        outARetorneOutras(node);
    }

    public void inABlocoOutras(ABlocoOutras node)
    {
        defaultIn(node);
    }

    public void outABlocoOutras(ABlocoOutras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoOutras(ABlocoOutras node)
    {
        inABlocoOutras(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoOutras(node);
    }

    public void inAChamadaOutras(AChamadaOutras node)
    {
        defaultIn(node);
    }

    public void outAChamadaOutras(AChamadaOutras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaOutras(AChamadaOutras node)
    {
        inAChamadaOutras(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getPontoFinal() != null)
        {
            node.getPontoFinal().apply(this);
        }
        outAChamadaOutras(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAIndexadaVar(AIndexadaVar node)
    {
        defaultIn(node);
    }

    public void outAIndexadaVar(AIndexadaVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndexadaVar(AIndexadaVar node)
    {
        inAIndexadaVar(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAbreColchete() != null)
        {
            node.getAbreColchete().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaColchete() != null)
        {
            node.getFechaColchete().apply(this);
        }
        outAIndexadaVar(node);
    }

    public void inAOuExp(AOuExp node)
    {
        defaultIn(node);
    }

    public void outAOuExp(AOuExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExp(AOuExp node)
    {
        inAOuExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAOuExp(node);
    }

    public void inAExp1Exp(AExp1Exp node)
    {
        defaultIn(node);
    }

    public void outAExp1Exp(AExp1Exp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp1Exp(AExp1Exp node)
    {
        inAExp1Exp(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAExp1Exp(node);
    }

    public void inAEExp1(AEExp1 node)
    {
        defaultIn(node);
    }

    public void outAEExp1(AEExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExp1(AEExp1 node)
    {
        inAEExp1(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAEExp1(node);
    }

    public void inAExp1(AExp1 node)
    {
        defaultIn(node);
    }

    public void outAExp1(AExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp1(AExp1 node)
    {
        inAExp1(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAExp1(node);
    }

    public void inAIgualExp2(AIgualExp2 node)
    {
        defaultIn(node);
    }

    public void outAIgualExp2(AIgualExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExp2(AIgualExp2 node)
    {
        inAIgualExp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAIgualExp2(node);
    }

    public void inAExp2(AExp2 node)
    {
        defaultIn(node);
    }

    public void outAExp2(AExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp2(AExp2 node)
    {
        inAExp2(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAExp2(node);
    }

    public void inAMenorIgualExp3(AMenorIgualExp3 node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExp3(AMenorIgualExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExp3(AMenorIgualExp3 node)
    {
        inAMenorIgualExp3(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAMenorIgualExp3(node);
    }

    public void inAExp3(AExp3 node)
    {
        defaultIn(node);
    }

    public void outAExp3(AExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp3(AExp3 node)
    {
        inAExp3(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAExp3(node);
    }

    public void inAMaiorIgualExp4(AMaiorIgualExp4 node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualExp4(AMaiorIgualExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualExp4(AMaiorIgualExp4 node)
    {
        inAMaiorIgualExp4(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAMaiorIgualExp4(node);
    }

    public void inAExp4(AExp4 node)
    {
        defaultIn(node);
    }

    public void outAExp4(AExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp4(AExp4 node)
    {
        inAExp4(node);
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAExp4(node);
    }

    public void inAMenorExp5(AMenorExp5 node)
    {
        defaultIn(node);
    }

    public void outAMenorExp5(AMenorExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExp5(AMenorExp5 node)
    {
        inAMenorExp5(node);
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getExp6() != null)
        {
            node.getExp6().apply(this);
        }
        outAMenorExp5(node);
    }

    public void inAExp5(AExp5 node)
    {
        defaultIn(node);
    }

    public void outAExp5(AExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp5(AExp5 node)
    {
        inAExp5(node);
        if(node.getExp6() != null)
        {
            node.getExp6().apply(this);
        }
        outAExp5(node);
    }

    public void inAMaiorExp6(AMaiorExp6 node)
    {
        defaultIn(node);
    }

    public void outAMaiorExp6(AMaiorExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExp6(AMaiorExp6 node)
    {
        inAMaiorExp6(node);
        if(node.getExp6() != null)
        {
            node.getExp6().apply(this);
        }
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        if(node.getExp7() != null)
        {
            node.getExp7().apply(this);
        }
        outAMaiorExp6(node);
    }

    public void inAExp6(AExp6 node)
    {
        defaultIn(node);
    }

    public void outAExp6(AExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp6(AExp6 node)
    {
        inAExp6(node);
        if(node.getExp7() != null)
        {
            node.getExp7().apply(this);
        }
        outAExp6(node);
    }

    public void inAMaisExp7(AMaisExp7 node)
    {
        defaultIn(node);
    }

    public void outAMaisExp7(AMaisExp7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisExp7(AMaisExp7 node)
    {
        inAMaisExp7(node);
        if(node.getExp7() != null)
        {
            node.getExp7().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        if(node.getExp8() != null)
        {
            node.getExp8().apply(this);
        }
        outAMaisExp7(node);
    }

    public void inAExp7(AExp7 node)
    {
        defaultIn(node);
    }

    public void outAExp7(AExp7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp7(AExp7 node)
    {
        inAExp7(node);
        if(node.getExp8() != null)
        {
            node.getExp8().apply(this);
        }
        outAExp7(node);
    }

    public void inAMenosExp8(AMenosExp8 node)
    {
        defaultIn(node);
    }

    public void outAMenosExp8(AMenosExp8 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExp8(AMenosExp8 node)
    {
        inAMenosExp8(node);
        if(node.getExp8() != null)
        {
            node.getExp8().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExp9() != null)
        {
            node.getExp9().apply(this);
        }
        outAMenosExp8(node);
    }

    public void inAExp8(AExp8 node)
    {
        defaultIn(node);
    }

    public void outAExp8(AExp8 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp8(AExp8 node)
    {
        inAExp8(node);
        if(node.getExp9() != null)
        {
            node.getExp9().apply(this);
        }
        outAExp8(node);
    }

    public void inAMultExp9(AMultExp9 node)
    {
        defaultIn(node);
    }

    public void outAMultExp9(AMultExp9 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp9(AMultExp9 node)
    {
        inAMultExp9(node);
        if(node.getExp9() != null)
        {
            node.getExp9().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExp10() != null)
        {
            node.getExp10().apply(this);
        }
        outAMultExp9(node);
    }

    public void inAExp9(AExp9 node)
    {
        defaultIn(node);
    }

    public void outAExp9(AExp9 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp9(AExp9 node)
    {
        inAExp9(node);
        if(node.getExp10() != null)
        {
            node.getExp10().apply(this);
        }
        outAExp9(node);
    }

    public void inADivExp10(ADivExp10 node)
    {
        defaultIn(node);
    }

    public void outADivExp10(ADivExp10 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp10(ADivExp10 node)
    {
        inADivExp10(node);
        if(node.getExp10() != null)
        {
            node.getExp10().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExp11() != null)
        {
            node.getExp11().apply(this);
        }
        outADivExp10(node);
    }

    public void inAExp10(AExp10 node)
    {
        defaultIn(node);
    }

    public void outAExp10(AExp10 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp10(AExp10 node)
    {
        inAExp10(node);
        if(node.getExp11() != null)
        {
            node.getExp11().apply(this);
        }
        outAExp10(node);
    }

    public void inANaoExp11(ANaoExp11 node)
    {
        defaultIn(node);
    }

    public void outANaoExp11(ANaoExp11 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExp11(ANaoExp11 node)
    {
        inANaoExp11(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        if(node.getExp12() != null)
        {
            node.getExp12().apply(this);
        }
        outANaoExp11(node);
    }

    public void inAExp11(AExp11 node)
    {
        defaultIn(node);
    }

    public void outAExp11(AExp11 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp11(AExp11 node)
    {
        inAExp11(node);
        if(node.getExp12() != null)
        {
            node.getExp12().apply(this);
        }
        outAExp11(node);
    }

    public void inAParentesesExp12(AParentesesExp12 node)
    {
        defaultIn(node);
    }

    public void outAParentesesExp12(AParentesesExp12 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesExp12(AParentesesExp12 node)
    {
        inAParentesesExp12(node);
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        outAParentesesExp12(node);
    }

    public void inAExp12(AExp12 node)
    {
        defaultIn(node);
    }

    public void outAExp12(AExp12 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp12(AExp12 node)
    {
        inAExp12(node);
        if(node.getExp13() != null)
        {
            node.getExp13().apply(this);
        }
        outAExp12(node);
    }

    public void inAChamadaExp13(AChamadaExp13 node)
    {
        defaultIn(node);
    }

    public void outAChamadaExp13(AChamadaExp13 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaExp13(AChamadaExp13 node)
    {
        inAChamadaExp13(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaExp13(node);
    }

    public void inAVarExp13(AVarExp13 node)
    {
        defaultIn(node);
    }

    public void outAVarExp13(AVarExp13 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp13(AVarExp13 node)
    {
        inAVarExp13(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExp13(node);
    }

    public void inANumeroExp13(ANumeroExp13 node)
    {
        defaultIn(node);
    }

    public void outANumeroExp13(ANumeroExp13 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroExp13(ANumeroExp13 node)
    {
        inANumeroExp13(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroExp13(node);
    }

    public void inACaractereExp13(ACaractereExp13 node)
    {
        defaultIn(node);
    }

    public void outACaractereExp13(ACaractereExp13 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereExp13(ACaractereExp13 node)
    {
        inACaractereExp13(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereExp13(node);
    }

    public void inABooleanoExp13(ABooleanoExp13 node)
    {
        defaultIn(node);
    }

    public void outABooleanoExp13(ABooleanoExp13 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoExp13(ABooleanoExp13 node)
    {
        inABooleanoExp13(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outABooleanoExp13(node);
    }

    public void inAStringExp13(AStringExp13 node)
    {
        defaultIn(node);
    }

    public void outAStringExp13(AStringExp13 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExp13(AStringExp13 node)
    {
        inAStringExp13(node);
        if(node.getVetorUnidimensional() != null)
        {
            node.getVetorUnidimensional().apply(this);
        }
        outAStringExp13(node);
    }

    public void inAChamada(AChamada node)
    {
        defaultIn(node);
    }

    public void outAChamada(AChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        inAChamada(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        outAChamada(node);
    }

    public void inAVazioListaExp(AVazioListaExp node)
    {
        defaultIn(node);
    }

    public void outAVazioListaExp(AVazioListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioListaExp(AVazioListaExp node)
    {
        inAVazioListaExp(node);
        outAVazioListaExp(node);
    }

    public void inAListaExpListaExp(AListaExpListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExpListaExp(AListaExpListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpListaExp(AListaExpListaExp node)
    {
        inAListaExpListaExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PPipeExp> copy = new ArrayList<PPipeExp>(node.getPipeExp());
            for(PPipeExp e : copy)
            {
                e.apply(this);
            }
        }
        outAListaExpListaExp(node);
    }

    public void inAPipeExp(APipeExp node)
    {
        defaultIn(node);
    }

    public void outAPipeExp(APipeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPipeExp(APipeExp node)
    {
        inAPipeExp(node);
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAPipeExp(node);
    }
}
