/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.analysis;

import java.util.*;
import caju.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PDecVariavel> copy = new ArrayList<PDecVariavel>(node.getDecVariavel());
            for(PDecVariavel e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecFuncao> copy = new ArrayList<PDecFuncao>(node.getDecFuncao());
            for(PDecFuncao e : copy)
            {
                e.apply(this);
            }
        }
        outAPrograma(node);
    }

    public void inADecVariavel(ADecVariavel node)
    {
        defaultIn(node);
    }

    public void outADecVariavel(ADecVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVariavel(ADecVariavel node)
    {
        inADecVariavel(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getListaNomes() != null)
        {
            node.getListaNomes().apply(this);
        }
        if(node.getPontoFinal() != null)
        {
            node.getPontoFinal().apply(this);
        }
        outADecVariavel(node);
    }

    public void inAListaNomes(AListaNomes node)
    {
        defaultIn(node);
    }

    public void outAListaNomes(AListaNomes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaNomes(AListaNomes node)
    {
        inAListaNomes(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PVirgulaId> copy = new ArrayList<PVirgulaId>(node.getVirgulaId());
            for(PVirgulaId e : copy)
            {
                e.apply(this);
            }
        }
        outAListaNomes(node);
    }

    public void inAVirgulaId(AVirgulaId node)
    {
        defaultIn(node);
    }

    public void outAVirgulaId(AVirgulaId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgulaId(AVirgulaId node)
    {
        inAVirgulaId(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVirgulaId(node);
    }

    public void inABaseTipo(ABaseTipo node)
    {
        defaultIn(node);
    }

    public void outABaseTipo(ABaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseTipo(ABaseTipo node)
    {
        inABaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outABaseTipo(node);
    }

    public void inAVetorTipo(AVetorTipo node)
    {
        defaultIn(node);
    }

    public void outAVetorTipo(AVetorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorTipo(AVetorTipo node)
    {
        inAVetorTipo(node);
        if(node.getVetor() != null)
        {
            node.getVetor().apply(this);
        }
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        {
            List<PExpColchete> copy = new ArrayList<PExpColchete>(node.getDir());
            for(PExpColchete e : copy)
            {
                e.apply(this);
            }
        }
        outAVetorTipo(node);
    }

    public void inAExpColchete(AExpColchete node)
    {
        defaultIn(node);
    }

    public void outAExpColchete(AExpColchete node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpColchete(AExpColchete node)
    {
        inAExpColchete(node);
        if(node.getAbreColchete() != null)
        {
            node.getAbreColchete().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaColchete() != null)
        {
            node.getFechaColchete().apply(this);
        }
        outAExpColchete(node);
    }

    public void inANumeroTipoBase(ANumeroTipoBase node)
    {
        defaultIn(node);
    }

    public void outANumeroTipoBase(ANumeroTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroTipoBase(ANumeroTipoBase node)
    {
        inANumeroTipoBase(node);
        if(node.getBaseNumero() != null)
        {
            node.getBaseNumero().apply(this);
        }
        outANumeroTipoBase(node);
    }

    public void inACaractereTipoBase(ACaractereTipoBase node)
    {
        defaultIn(node);
    }

    public void outACaractereTipoBase(ACaractereTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipoBase(ACaractereTipoBase node)
    {
        inACaractereTipoBase(node);
        if(node.getBaseCaractere() != null)
        {
            node.getBaseCaractere().apply(this);
        }
        outACaractereTipoBase(node);
    }

    public void inABooleanoTipoBase(ABooleanoTipoBase node)
    {
        defaultIn(node);
    }

    public void outABooleanoTipoBase(ABooleanoTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoTipoBase(ABooleanoTipoBase node)
    {
        inABooleanoTipoBase(node);
        if(node.getBaseBooleano() != null)
        {
            node.getBaseBooleano().apply(this);
        }
        outABooleanoTipoBase(node);
    }

    public void inADecFuncao(ADecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncao(ADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        inADecFuncao(node);
        if(node.getSeta() != null)
        {
            node.getSeta().apply(this);
        }
        if(node.getTipoRetorno() != null)
        {
            node.getTipoRetorno().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outADecFuncao(node);
    }

    public void inATipoTipoRetorno(ATipoTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outATipoTipoRetorno(ATipoTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoTipoRetorno(ATipoTipoRetorno node)
    {
        inATipoTipoRetorno(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoTipoRetorno(node);
    }

    public void inAVazioTipoRetorno(AVazioTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outAVazioTipoRetorno(AVazioTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioTipoRetorno(AVazioTipoRetorno node)
    {
        inAVazioTipoRetorno(node);
        if(node.getVazio() != null)
        {
            node.getVazio().apply(this);
        }
        outAVazioTipoRetorno(node);
    }

    public void inAVazioParametros(AVazioParametros node)
    {
        defaultIn(node);
    }

    public void outAVazioParametros(AVazioParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioParametros(AVazioParametros node)
    {
        inAVazioParametros(node);
        outAVazioParametros(node);
    }

    public void inAParametroParametros(AParametroParametros node)
    {
        defaultIn(node);
    }

    public void outAParametroParametros(AParametroParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroParametros(AParametroParametros node)
    {
        inAParametroParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        {
            List<PPipeParametro> copy = new ArrayList<PPipeParametro>(node.getPipeParametro());
            for(PPipeParametro e : copy)
            {
                e.apply(this);
            }
        }
        outAParametroParametros(node);
    }

    public void inAPipeParametro(APipeParametro node)
    {
        defaultIn(node);
    }

    public void outAPipeParametro(APipeParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPipeParametro(APipeParametro node)
    {
        inAPipeParametro(node);
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAPipeParametro(node);
    }

    public void inAParametro(AParametro node)
    {
        defaultIn(node);
    }

    public void outAParametro(AParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        inAParametro(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParametro(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        {
            List<PDecVariavel> copy = new ArrayList<PDecVariavel>(node.getDecVariavel());
            for(PDecVariavel e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        outABloco(node);
    }

    public void inAAtrib(AAtrib node)
    {
        defaultIn(node);
    }

    public void outAAtrib(AAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtrib(AAtrib node)
    {
        inAAtrib(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAtribuir() != null)
        {
            node.getAtribuir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAtrib(node);
    }

    public void inAListaAtrib(AListaAtrib node)
    {
        defaultIn(node);
    }

    public void outAListaAtrib(AListaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaAtrib(AListaAtrib node)
    {
        inAListaAtrib(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        {
            List<PVirgulaAtrib> copy = new ArrayList<PVirgulaAtrib>(node.getVirgulaAtrib());
            for(PVirgulaAtrib e : copy)
            {
                e.apply(this);
            }
        }
        outAListaAtrib(node);
    }

    public void inAVirgulaAtrib(AVirgulaAtrib node)
    {
        defaultIn(node);
    }

    public void outAVirgulaAtrib(AVirgulaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgulaAtrib(AVirgulaAtrib node)
    {
        inAVirgulaAtrib(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        outAVirgulaAtrib(node);
    }


    public void inACasamComando(ACasamComando node)
    {
        defaultIn(node);
    }

    public void outACasamComando(ACasamComando node)
    {
        defaultOut(node);
    }

    @Override

    public void caseACasamComando(ACasamComando node)
    {
        inACasamComando(node);
        if(node.getComandoCasam() != null)
        {
            node.getComandoCasam().apply(this);
        }
        outACasamComando(node);
    }

    public void inASemCasamComando(ASemCasamComando node)
    {
        defaultIn(node);
    }


    public void outASemCasamComando(ASemCasamComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemCasamComando(ASemCasamComando node)
    {
        inASemCasamComando(node);
        if(node.getComandoSemCasam() != null)
        {
            node.getComandoSemCasam().apply(this);
        }
        outASemCasamComando(node);

    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getEsqLista() != null)
        {
            node.getEsqLista().apply(this);
        }
        if(node.getEsqPonto() != null)
        {
            node.getEsqPonto().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDirPonto() != null)
        {
            node.getDirPonto().apply(this);
        }
        if(node.getDirLista() != null)
        {
            node.getDirLista().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAParaComando(node);
    }

    public void inAParaCadaComando(AParaCadaComando node)
    {
        defaultIn(node);
    }

    public void outAParaCadaComando(AParaCadaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaCadaComando(AParaCadaComando node)
    {
        inAParaCadaComando(node);
        if(node.getParaCada() != null)
        {
            node.getParaCada().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAParaCadaComando(node);
    }

    public void inAAtribComando(AAtribComando node)
    {
        defaultIn(node);
    }

    public void outAAtribComando(AAtribComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribComando(AAtribComando node)
    {
        inAAtribComando(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getPontoFinal() != null)
        {
            node.getPontoFinal().apply(this);
        }
        outAAtribComando(node);
    }

    public void inARetorneComando(ARetorneComando node)
    {
        defaultIn(node);
    }

    public void outARetorneComando(ARetorneComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetorneComando(ARetorneComando node)
    {
        inARetorneComando(node);
        if(node.getRetorne() != null)
        {
            node.getRetorne().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPontoFinal() != null)
        {
            node.getPontoFinal().apply(this);
        }
        outARetorneComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComando(node);
    }

    public void inAChamadaComando(AChamadaComando node)
    {
        defaultIn(node);
    }

    public void outAChamadaComando(AChamadaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaComando(AChamadaComando node)
    {
        inAChamadaComando(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getPontoFinal() != null)
        {
            node.getPontoFinal().apply(this);
        }
        outAChamadaComando(node);
    }

    public void inASeComandoCasam(ASeComandoCasam node)
    {
        defaultIn(node);
    }

    public void outASeComandoCasam(ASeComandoCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandoCasam(ASeComandoCasam node)
    {
        inASeComandoCasam(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outASeComandoCasam(node);
    }

    public void inASeComandoSemCasam(ASeComandoSemCasam node)
    {
        defaultIn(node);
    }

    public void outASeComandoSemCasam(ASeComandoSemCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandoSemCasam(ASeComandoSemCasam node)
    {
        inASeComandoSemCasam(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outASeComandoSemCasam(node);
    }

    public void inASeSenaoComandoSemCasam(ASeSenaoComandoSemCasam node)
    {
        defaultIn(node);
    }

    public void outASeSenaoComandoSemCasam(ASeSenaoComandoSemCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSenaoComandoSemCasam(ASeSenaoComandoSemCasam node)
    {
        inASeSenaoComandoSemCasam(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComandoCasam() != null)
        {
            node.getComandoCasam().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getComandoSemCasam() != null)
        {
            node.getComandoSemCasam().apply(this);
        }
        outASeSenaoComandoSemCasam(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outASeSenaoDecCasam(ASeSenaoDecCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSenaoDecCasam(ASeSenaoDecCasam node)
    {
        inASeSenaoDecCasam(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outASeSenaoDecCasam(node);
    }

    public void inAEnquantoDecCasam(AEnquantoDecCasam node)
    {
        defaultIn(node);
    }

    public void outAEnquantoDecCasam(AEnquantoDecCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoDecCasam(AEnquantoDecCasam node)
    {
        inAEnquantoDecCasam(node);
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAEnquantoDecCasam(node);
    }

    public void inAParaDecCasam(AParaDecCasam node)
    {
        defaultIn(node);
    }

    public void outAParaDecCasam(AParaDecCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaDecCasam(AParaDecCasam node)
    {
        inAParaDecCasam(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getEsqLista() != null)
        {
            node.getEsqLista().apply(this);
        }
        if(node.getEsqPonto() != null)
        {
            node.getEsqPonto().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDirPonto() != null)
        {
            node.getDirPonto().apply(this);
        }
        if(node.getDirLista() != null)
        {
            node.getDirLista().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAParaDecCasam(node);
    }

    public void inACaractereExp(ACaractereExp node)
    {
        defaultIn(node);
    }

    public void outACaractereExp(ACaractereExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereExp(ACaractereExp node)
    {
        inACaractereExp(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereExp(node);
    }

    public void inABooleanoExp(ABooleanoExp node)
    {
        defaultIn(node);
    }

    public void outABooleanoExp(ABooleanoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoExp(ABooleanoExp node)
    {
        inABooleanoExp(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outABooleanoExp(node);
    }

    public void inAOuExp(AOuExp node)
    {
        defaultIn(node);
    }

    public void outAParaCadaDecCasam(AParaCadaDecCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaCadaDecCasam(AParaCadaDecCasam node)
    {
        inAOuExp(node);
        if(node.getExp() != null)

        {
            node.getExp().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getExpOu() != null)
        {
            node.getExpOu().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAParaCadaDecCasam(node);
    }


    public void inAExpOuExp(AExpOuExp node)

    {
        defaultIn(node);
    }


    public void outAExpOuExp(AExpOuExp node)

    {
        defaultOut(node);
    }

    @Override

    public void caseAExpOuExp(AExpOuExp node)
    {
        inAExpOuExp(node);
        if(node.getExpOu() != null)
        {
            node.getExpOu().apply(this);
        }
        outAExpOuExp(node);
    }

    public void inAEExpOu(AEExpOu node)
    {
        defaultIn(node);
    }

    public void outAEExpOu(AEExpOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExpOu(AEExpOu node)
    {
        inAEExpOu(node);
        if(node.getExpOu() != null)
        {
            node.getExpOu().apply(this);
        }
        if(node.getE() != null)

        {
            node.getAtrib().apply(this);
        }

        if(node.getExpE() != null)
        {
            node.getExpE().apply(this);
        }
        outAEExpOu(node);
    }

    public void inAExpEExpOu(AExpEExpOu node)

    {
        defaultIn(node);
    }

    public void outAExpEExpOu(AExpEExpOu node)

    {
        defaultOut(node);
    }

    @Override
    public void caseAExpEExpOu(AExpEExpOu node)
    {
        inAExpEExpOu(node);
        if(node.getExpE() != null)
        {
            node.getExpE().apply(this);
        }
        outAExpEExpOu(node);
    }

    public void inAIgualExpE(AIgualExpE node)

    {
        defaultIn(node);
    }


    public void outAIgualExpE(AIgualExpE node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExpE(AIgualExpE node)
    {
        inAIgualExpE(node);
        if(node.getExpE() != null)
        {
            node.getExpE().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getExpIgual() != null)
        {
            node.getExpIgual().apply(this);
        }
        outAIgualExpE(node);
    }

    public void inAExpIgualExpE(AExpIgualExpE node)

    {
        defaultIn(node);
    }

    public void outAExpIgualExpE(AExpIgualExpE node)

    {
        defaultOut(node);
    }

    @Override

    public void caseAExpIgualExpE(AExpIgualExpE node)
    {
        inAExpIgualExpE(node);
        if(node.getExpIgual() != null)
        {
            node.getExpIgual().apply(this);
        }
        outAExpIgualExpE(node);
    }

    public void inAMaiorMenorExpIgual(AMaiorMenorExpIgual node)

    {
        defaultIn(node);
    }


    public void outAMaiorMenorExpIgual(AMaiorMenorExpIgual node)

    {
        defaultOut(node);
    }

    @Override

    public void caseAMaiorMenorExpIgual(AMaiorMenorExpIgual node)
    {
        inAMaiorMenorExpIgual(node);
        if(node.getExpIgual() != null)
        {
            node.getExpIgual().apply(this);
        }
        if(node.getOperadorRelacional() != null)
        {
            node.getOperadorRelacional().apply(this);
        }
        if(node.getExpCmp() != null)
        {
            node.getExpCmp().apply(this);
        }
        outAMaiorMenorExpIgual(node);
    }

    public void inAExpCmpExpIgual(AExpCmpExpIgual node)

    {
        defaultIn(node);
    }


    public void outAExpCmpExpIgual(AExpCmpExpIgual node)

    {
        defaultOut(node);
    }

    @Override
    public void caseAExpCmpExpIgual(AExpCmpExpIgual node)
    {
        inAExpCmpExpIgual(node);
        if(node.getExpCmp() != null)
        {
            node.getExpCmp().apply(this);
        }
        outAExpCmpExpIgual(node);
    }

    public void inAAdicaoSubtracaoExpCmp(AAdicaoSubtracaoExpCmp node)
    {
        defaultIn(node);
    }

    public void outAAdicaoSubtracaoExpCmp(AAdicaoSubtracaoExpCmp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdicaoSubtracaoExpCmp(AAdicaoSubtracaoExpCmp node)
    {
        inAAdicaoSubtracaoExpCmp(node);
        if(node.getExpCmp() != null)
        {
            node.getExpCmp().apply(this);
        }
        if(node.getMaisMenos() != null)
        {
            node.getMaisMenos().apply(this);
        }
        if(node.getExpTermo() != null)
        {
            node.getExpTermo().apply(this);
        }
        outAAdicaoSubtracaoExpCmp(node);
    }

    public void inAExpTermoExpCmp(AExpTermoExpCmp node)
    {
        defaultIn(node);
    }

    public void outAExpTermoExpCmp(AExpTermoExpCmp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpTermoExpCmp(AExpTermoExpCmp node)
    {
        inAExpTermoExpCmp(node);
        if(node.getExpTermo() != null)
        {
            node.getExpTermo().apply(this);
        }
        outAExpTermoExpCmp(node);
    }

    public void inAMultiplicacaoDivisaoExpTermo(AMultiplicacaoDivisaoExpTermo node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoDivisaoExpTermo(AMultiplicacaoDivisaoExpTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoDivisaoExpTermo(AMultiplicacaoDivisaoExpTermo node)
    {
        inAMultiplicacaoDivisaoExpTermo(node);
        if(node.getExpTermo() != null)
        {
            node.getExpTermo().apply(this);
        }
        if(node.getMultDiv() != null)
        {
            node.getMultDiv().apply(this);
        }
        if(node.getExpNao() != null)
        {
            node.getExpNao().apply(this);
        }
        outAMultiplicacaoDivisaoExpTermo(node);
    }

    public void inAExpNaoExpTermo(AExpNaoExpTermo node)
    {
        defaultIn(node);
    }

    public void outAExpNaoExpTermo(AExpNaoExpTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpNaoExpTermo(AExpNaoExpTermo node)
    {
        inAExpNaoExpTermo(node);
        if(node.getExpNao() != null)
        {
            node.getExpNao().apply(this);
        }
        outAExpNaoExpTermo(node);
    }

    public void inANaoExpNao(ANaoExpNao node)
    {
        defaultIn(node);
    }

    public void outANaoExpNao(ANaoExpNao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExpNao(ANaoExpNao node)
    {
        inANaoExpNao(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        if(node.getExpNao() != null)
        {
            node.getExpNao().apply(this);
        }
        outANaoExpNao(node);
    }

    public void inAExpFatorExpNao(AExpFatorExpNao node)
    {
        defaultIn(node);
    }

    public void outAExpFatorExpNao(AExpFatorExpNao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpFatorExpNao(AExpFatorExpNao node)
    {
        inAExpFatorExpNao(node);
        if(node.getExpFator() != null)
        {
            node.getExpFator().apply(this);
        }
        outAExpFatorExpNao(node);
    }

    public void inAExpExpFator(AExpExpFator node)
    {
        defaultIn(node);
    }

    public void outAExpExpFator(AExpExpFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpExpFator(AExpExpFator node)
    {
        inAExpExpFator(node);
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        outAExpExpFator(node);
    }

    public void inANumeroExpFator(ANumeroExpFator node)
    {
        defaultIn(node);
    }

    public void outANumeroExpFator(ANumeroExpFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroExpFator(ANumeroExpFator node)
    {
        inANumeroExpFator(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroExpFator(node);
    }

    public void inAMenorIgualOperadorRelacional(AMenorIgualOperadorRelacional node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualOperadorRelacional(AMenorIgualOperadorRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualOperadorRelacional(AMenorIgualOperadorRelacional node)
    {
        inAMenorIgualOperadorRelacional(node);
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        outAMenorIgualOperadorRelacional(node);
    }

    public void inAMaiorIgualOperadorRelacional(AMaiorIgualOperadorRelacional node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualOperadorRelacional(AMaiorIgualOperadorRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualOperadorRelacional(AMaiorIgualOperadorRelacional node)
    {
        inAMaiorIgualOperadorRelacional(node);
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        outAMaiorIgualOperadorRelacional(node);
    }

    public void inAMenorOperadorRelacional(AMenorOperadorRelacional node)
    {
        defaultIn(node);
    }

    public void outAMenorOperadorRelacional(AMenorOperadorRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorOperadorRelacional(AMenorOperadorRelacional node)
    {
        inAMenorOperadorRelacional(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorOperadorRelacional(node);
    }

    public void inAMaiorOperadorRelacional(AMaiorOperadorRelacional node)
    {
        defaultIn(node);
    }

    public void outAMaiorOperadorRelacional(AMaiorOperadorRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorOperadorRelacional(AMaiorOperadorRelacional node)
    {
        inAMaiorOperadorRelacional(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorOperadorRelacional(node);
    }

    public void inAMaisMaisMenos(AMaisMaisMenos node)
    {
        defaultIn(node);
    }

    public void outAMaisMaisMenos(AMaisMaisMenos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisMaisMenos(AMaisMaisMenos node)
    {
        inAMaisMaisMenos(node);
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        outAMaisMaisMenos(node);
    }

    public void inAMenosMaisMenos(AMenosMaisMenos node)
    {
        defaultIn(node);
    }

    public void outAMenosMaisMenos(AMenosMaisMenos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosMaisMenos(AMenosMaisMenos node)
    {
        inAMenosMaisMenos(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosMaisMenos(node);
    }

    public void inAMultMultDiv(AMultMultDiv node)
    {
        defaultIn(node);
    }

    public void outAMultMultDiv(AMultMultDiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultMultDiv(AMultMultDiv node)
    {
        inAMultMultDiv(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultMultDiv(node);
    }

    public void inADivMultDiv(ADivMultDiv node)
    {
        defaultIn(node);
    }

    public void outADivMultDiv(ADivMultDiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMultDiv(ADivMultDiv node)
    {
        inADivMultDiv(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivMultDiv(node);
    }

    public void inAChamada(AChamada node)
    {
        defaultIn(node);
    }

    public void outAChamada(AChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        inAChamada(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        outAChamada(node);
    }

    public void inAVazioListaExp(AVazioListaExp node)
    {
        defaultIn(node);
    }

    public void outAVazioListaExp(AVazioListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioListaExp(AVazioListaExp node)
    {
        inAVazioListaExp(node);
        outAVazioListaExp(node);
    }

    public void inAListaExpListaExp(AListaExpListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExpListaExp(AListaExpListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpListaExp(AListaExpListaExp node)
    {
        inAListaExpListaExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PPipeExp> copy = new ArrayList<PPipeExp>(node.getPipeExp());
            for(PPipeExp e : copy)
            {
                e.apply(this);
            }
        }
        outAListaExpListaExp(node);
    }

    public void inAPipeExp(APipeExp node)
    {
        defaultIn(node);
    }

    public void outAPipeExp(APipeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPipeExp(APipeExp node)
    {
        inAPipeExp(node);
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAPipeExp(node);
    }
}
