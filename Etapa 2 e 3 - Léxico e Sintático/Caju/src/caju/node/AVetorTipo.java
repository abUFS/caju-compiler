/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.node;

import java.util.*;
import caju.analysis.*;

@SuppressWarnings("nls")
public final class AVetorTipo extends PTipo
{
    private TVetor _vetor_;
    private PTipoBase _tipoBase_;
    private PExpColchete _esq_;
    private final LinkedList<PExpColchete> _dir_ = new LinkedList<PExpColchete>();

    public AVetorTipo()
    {
        // Constructor
    }

    public AVetorTipo(
        @SuppressWarnings("hiding") TVetor _vetor_,
        @SuppressWarnings("hiding") PTipoBase _tipoBase_,
        @SuppressWarnings("hiding") PExpColchete _esq_,
        @SuppressWarnings("hiding") List<?> _dir_)
    {
        // Constructor
        setVetor(_vetor_);

        setTipoBase(_tipoBase_);

        setEsq(_esq_);

        setDir(_dir_);

    }

    @Override
    public Object clone()
    {
        return new AVetorTipo(
            cloneNode(this._vetor_),
            cloneNode(this._tipoBase_),
            cloneNode(this._esq_),
            cloneList(this._dir_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVetorTipo(this);
    }

    public TVetor getVetor()
    {
        return this._vetor_;
    }

    public void setVetor(TVetor node)
    {
        if(this._vetor_ != null)
        {
            this._vetor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._vetor_ = node;
    }

    public PTipoBase getTipoBase()
    {
        return this._tipoBase_;
    }

    public void setTipoBase(PTipoBase node)
    {
        if(this._tipoBase_ != null)
        {
            this._tipoBase_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tipoBase_ = node;
    }

    public PExpColchete getEsq()
    {
        return this._esq_;
    }

    public void setEsq(PExpColchete node)
    {
        if(this._esq_ != null)
        {
            this._esq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._esq_ = node;
    }

    public LinkedList<PExpColchete> getDir()
    {
        return this._dir_;
    }

    public void setDir(List<?> list)
    {
        for(PExpColchete e : this._dir_)
        {
            e.parent(null);
        }
        this._dir_.clear();

        for(Object obj_e : list)
        {
            PExpColchete e = (PExpColchete) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._dir_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._vetor_)
            + toString(this._tipoBase_)
            + toString(this._esq_)
            + toString(this._dir_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._vetor_ == child)
        {
            this._vetor_ = null;
            return;
        }

        if(this._tipoBase_ == child)
        {
            this._tipoBase_ = null;
            return;
        }

        if(this._esq_ == child)
        {
            this._esq_ = null;
            return;
        }

        if(this._dir_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._vetor_ == oldChild)
        {
            setVetor((TVetor) newChild);
            return;
        }

        if(this._tipoBase_ == oldChild)
        {
            setTipoBase((PTipoBase) newChild);
            return;
        }

        if(this._esq_ == oldChild)
        {
            setEsq((PExpColchete) newChild);
            return;
        }

        for(ListIterator<PExpColchete> i = this._dir_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpColchete) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
