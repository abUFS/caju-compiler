Package caju;

Helpers
	todos_caracteres = [ 0 .. 0xFFFF];
	digito = ['0' .. '9'];
	espaco = ' ';	
 	minusculas = ['a' .. 'z'];
 	maiusculas = ['A' .. 'Z'];
 	underscore = '_';
 	letra = minusculas | maiusculas;
 	hashtag = '#';
 	abre_chave = '{';
 	fecha_chave = '}';
 	rc = 13;
 	nl = 10;
	aspas_duplas = '"';
	aspas_simples = ''';
	caracteres_sem_nl_rc = [todos_caracteres - [rc + nl]];
	caracteres_sem_chaves = [todos_caracteres - fecha_chave];
	caracteres_sem_nl_rc_aspas_simples = [caracteres_sem_nl_rc - aspas_simples];
	caracteres_sem_nl_rc_aspas_duplas = [caracteres_sem_nl_rc - aspas_duplas];
	inteiro = digito+;
	real = digito+ (',') digito+;
	verdadeiro = 'verdadeiro';
	falso = 'falso';
 	
 	
Tokens
 	ignorar = (espaco | rc | nl)+;
	base_caractere = 'caractere';
	base_numero = 'numero';
	base_booleano = 'booleano';
	vetor = 'vetor';
	vazio = 'vazio';
	caractere = aspas_simples '\'? caracteres_sem_nl_rc_aspas_simples aspas_simples;
	booleano = verdadeiro | falso;
	numero = inteiro | real;
	vetor_unidimensional = aspas_duplas caracteres_sem_nl_rc_aspas_duplas+ aspas_duplas;
	inicio = 'inicio';
	fim = 'fim';
	coment_linha = hashtag caracteres_sem_nl_rc*;
	coment_bloco = abre_chave caracteres_sem_chaves* fecha_chave;
	enquanto = 'enquanto';
	para = 'para';
	para_cada = 'para cada';
	se = 'se';
	senao = 'senao';
	retorne = 'retorne';
	mais = '+';
	menos = '-';
	mult = '*';
	div = '/';
	maior = '>';
	menor = '<';
	maior_igual = '>=';
	menor_igual = '<=';
	igual = '=';
	nao = 'nao';
	e = 'e';
	ou = 'ou';
	atribuir = ':=';
	ponto_final = '.';
	virgula = ',';
	abre_colchete = '[';
	fecha_colchete = ']';
	seta = '->';
	abre_parenteses = '(';
	fecha_parenteses = ')';
	pipe = '|';
	ponto_virgula = ';';
	dois_pontos = ':';
	id = letra (letra | digito | underscore)*;
	
	
Ignored Tokens
	ignorar, coment_linha, coment_bloco;
	
	
Productions

 programa =
   dec_variavel* dec_funcao*;
  
 dec_variavel =
   tipo lista_nomes ponto_final;
 
 lista_nomes =
   id virgula_id*;
   
  virgula_id = 
    virgula id;
   
 tipo =
     {base} tipo_base
   | {vetor} vetor tipo_base [esq]:exp_colchete [dir]:exp_colchete*;
 
 exp_colchete =
   abre_colchete exp fecha_colchete;
 
 tipo_base = 
     {numero} base_numero
   | {caractere} base_caractere
   | {booleano} base_booleano;
 
 dec_funcao =
   seta? tipo_retorno id abre_parenteses parametros fecha_parenteses bloco;
    
 tipo_retorno =
     {tipo} tipo
   | {vazio} vazio;
 
 parametros = 
   {vazio}
   | {parametro} parametro pipe_parametro*;
 
 pipe_parametro =
   pipe parametro;
   
 parametro = 
   tipo id;

 bloco =
   inicio dec_variavel* comando* fim;
   
 atrib =
   var atribuir exp;
   
 lista_atrib =
   atrib virgula_atrib*;
 
 virgula_atrib =
   virgula atrib;
   
 
 comando =
     {casam} comando_casam
   | {sem_casam} comando_sem_casam;
 
 comando_casam =
     {se} se abre_parenteses exp fecha_parenteses comando
   | {senao} se abre_parenteses exp fecha_parenteses comando_sem_casam senao comando_casam
   | {enquanto} enquanto abre_parenteses exp fecha_parenteses comando
   | {para} para abre_parenteses [esq_lista]:lista_atrib [esq_ponto]:ponto_virgula exp [dir_ponto]:ponto_virgula [dir_lista]:lista_atrib fecha_parenteses comando
   | {para_cada} para_cada abre_parenteses tipo [esq]:id dois_pontos [dir]:id fecha_parenteses comando;
 
 comando_sem_casam =   
     {se_senao} se abre_parenteses exp fecha_parenteses [esq]:comando_sem_casam senao [dir]:comando_sem_casam
   | {atrib} atrib ponto_final
   | {retorne} retorne exp? ponto_final
   | {bloco} bloco
   | {chamada} chamada ponto_final;
 
 
 var {-> a_var} = 
     {id} id {-> var.a_var}
   | {indexada} var abre_colchete exp fecha_colchete ;
  
 exp {-> a_exp} =     
     {ou} exp ou exp1 {-> New a_exp.a_ou(exp.a_exp, exp.a_exp)}
   | {exp1} exp1 {-> exp1.a_exp};
   
 exp1 {-> a_exp} =
     {e} exp1 e exp2 {-> New a_exp.a_e(exp.a_exp, exp.a_exp)}
   | exp2 {-> exp2.a_exp};
 
 exp2 {-> a_exp} =
     {igual} exp2 igual exp3 {-> New a_exp.a_igual(exp.a_exp, exp.a_exp)}
   | exp3 {-> exp3.a_exp};
 
 exp3 {-> a_exp} =
     {menor_igual} exp3 menor_igual exp4 {-> New a_exp.a_menor_igual(exp.a_exp, exp.a_exp)}
   | exp4 {-> exp4.a_exp};
 
 exp4 {-> a_exp} =
     {maior_igual} exp4 maior_igual exp5 {-> New a_exp.a_maior_igual(exp.a_exp, exp.a_exp)}
   | exp5 {-> exp5.a_exp};
 
 exp5 {-> a_exp} =
     {menor} exp5 menor exp6 {-> New a_exp.a_menor(exp.a_exp, exp.a_exp)}
   | exp6 {-> exp6.a_exp};
 
 exp6 {-> a_exp} =
     {maior} exp6 maior exp7 {-> New a_exp.a_maior(exp.a_exp, exp.a_exp)}
   | exp7 {-> exp7.a_exp};
 
 exp7 {-> a_exp} =
     {mais} exp7 mais exp8 {-> New a_exp.a_mais(exp.a_exp, exp.a_exp)}
   | exp8 {-> exp8.a_exp};
 
 exp8 {-> a_exp} =
     {menos} exp8 menos exp9 {-> New a_exp.a_menos(exp.a_exp, exp.a_exp)}
   | exp9 {-> exp9.a_exp};
 
 exp9 {-> a_exp} =
     {mult} exp9 mult exp10 {-> New a_exp.a_mult(exp.a_exp, exp.a_exp)}
   | exp10 {-> exp10.a_exp};
 
 exp10 {-> a_exp} =
     {div} exp10 div exp11 {-> New a_exp.a_div(exp.a_exp, exp.a_exp)}
   | exp11 {-> exp11.a_exp};
 
 exp11 {-> exp.a_exp} =
     {nao} nao exp12 {-> exp.a_exp}
   | exp12 {-> exp12.a_exp};
 
 exp12 {-> exp.a_exp} =
     {parenteses} abre_parenteses exp fecha_parenteses {-> exp.a_exp}
   | exp13 {-> exp13.a_exp};
   
 exp13 {-> a_exp} = 
     {chamada} chamada 
   | {var} var {-> var.a_var }
   | {numero} numero {-> New a_exp.a_numero(numero)}
   | {caractere} caractere {-> New a_exp.a_numero(caractere)}
   | {booleano} booleano {-> New a_exp.a_numero(booleano)}
   | {string} vetor_unidimensional {-> New a_exp.a_numero(vetor_unidimensional)};
   
 chamada = 
   id abre_parenteses lista_exp fecha_parenteses;
  
 lista_exp =
    {vazio}
   | {lista_exp} exp pipe_exp*;
 
 pipe_exp {-> a_exp} = 
   pipe exp {-> exp.a_exp};
  
Abstract Syntax Tree

 a_exp = 
     {a_ou} [esq]:a_exp [dir]a_exp
   | {a_e} [esq]:a_exp [dir]a_exp
   | {a_igual} [esq]:a_exp [dir]a_exp
   | {a_menor_igual} [esq]:a_exp [dir]a_exp
   | {a_maior_igual} [esq]:a_exp [dir]a_exp
   | {a_menor} [esq]:a_exp [dir]a_exp
   | {a_maior} [esq]:a_exp [dir]a_exp
   | {a_mais} [esq]:a_exp [dir]a_exp
   | {a_menos} [esq]:a_exp [dir]a_exp
   | {a_mult} [esq]:a_exp [dir]a_exp
   | {a_div} [esq]:a_exp [dir]a_exp
   | {a_numero} a_numero
   | {a_caractere} a_caractere
   | {a_booleano} a_booleano
   | {a_string} a_vetor_unidimensional;
     
 a_var =
     {id} id;