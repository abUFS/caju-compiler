Package caju;

Helpers
	todos_caracteres = [ 0 .. 0xFFFF];
	digito = ['0' .. '9'];
	espaco = ' ';	
 	minusculas = ['a' .. 'z'];
 	maiusculas = ['A' .. 'Z'];
 	underscore = '_';
 	letra = minusculas | maiusculas;
 	hashtag = '#';
 	abre_chave = '{';
 	fecha_chave = '}';
 	rc = 13;
 	nl = 10;
	aspas_duplas = '"';
	aspas_simples = ''';
	caracteres_sem_nl_rc = [todos_caracteres - [rc + nl]];
	caracteres_sem_chaves = [todos_caracteres - fecha_chave];
	caracteres_sem_nl_rc_aspas_simples = [caracteres_sem_nl_rc - aspas_simples];
	caracteres_sem_nl_rc_aspas_duplas = [caracteres_sem_nl_rc - aspas_duplas];
	inteiro = digito+;
	real = digito+ (',') digito+;
	verdadeiro = 'verdadeiro';
	falso = 'falso';
 	
 	
Tokens
 	ignorar = (espaco | rc | nl)+;
	base_caractere = 'caractere';
	base_numero = 'numero';
	base_booleano = 'booleano';
	vetor = 'vetor';
	vazio = 'vazio';
	caractere = aspas_simples '\'? caracteres_sem_nl_rc_aspas_simples aspas_simples;
	verdadeiro = verdadeiro;
	falso = falso;
	booleano = verdadeiro | falso;
	numero = inteiro | real;
	vetor_unidimensional = aspas_duplas caracteres_sem_nl_rc_aspas_duplas+ aspas_duplas;
	inicio = 'inicio';
	fim = 'fim';
	coment_linha = hashtag caracteres_sem_nl_rc*;
	coment_bloco = abre_chave caracteres_sem_chaves* fecha_chave;
	enquanto = 'enquanto';
	para = 'para';
	para_cada = 'para cada';
	se = 'se';
	senao = 'senao';
	retorne = 'retorne';
	mais = '+';
	menos = '-';
	mult = '*';
	div = '/';
	maior = '>';
	menor = '<';
	maior_igual = '>=';
	menor_igual = '<=';
	igual = '=';
	nao = 'nao';
	e = 'e';
	ou = 'ou';
	atribuir = ':=';
	ponto_final = '.';
	exibir = 'exibir';
	ler = 'ler';
	virgula = ',';
	abre_colchete = '[';
	fecha_colchete = ']';
	seta = '->';
	abre_parenteses = '(';
	fecha_parenteses = ')';
	pipe = '|';
	ponto_virgula = ';';
	dois_pontos = ':';
	id = letra (letra | digito | underscore)*;
	
	
Ignored Tokens
	ignorar;
	
	
Productions

 programa =
   dec_variavel* dec_funcao*;
  
 dec_variavel =
   tipo lista_nomes ponto_final;
 
 lista_nomes =
   id virgula_id*;
   
  virgula_id = 
    virgula id;
   
 tipo =
     {base} tipo_base
   | {vetor} vetor tipo_base [esq]:exp_colchete [dir]:exp_colchete*;
 
 exp_colchete =
   abre_colchete exp fecha_colchete;
 
 tipo_base = 
     {numero} base_numero
   | {caractere} base_caractere
   | {booleano} base_booleano;
 
 dec_funcao =
   seta? tipo_retorno id abre_parenteses parametros fecha_parenteses bloco;
    
 tipo_retorno =
     {tipo} tipo
   | {vazio} vazio;
 
 parametros = 
   {vazio}
   | {parametro} parametro pipe_parametro*;
 
 pipe_parametro =
   pipe parametro;
   
 parametro = 
   tipo id;

 bloco =
   inicio dec_variavel* comando* fim;
   
 atrib =
   var atribuir exp;
   
 lista_atrib =
   atrib virgula_atrib*;
 
 virgula_atrib =
   virgula atrib;
  
 comando =
     {se} se abre_parenteses exp fecha_parenteses comando
   | {se_senao} se abre_parenteses exp fecha_parenteses [esq]:comando senao [dir]:comando
   | {enquanto} enquanto abre_parenteses exp fecha_parenteses comando
   | {para} para abre_parenteses [esq_lista]:lista_atrib [esq_ponto]:ponto_virgula exp [dir_ponto]:ponto_virgula [dir_lista]:lista_atrib fecha_parenteses comando
   | {para_cada} para_cada abre_parenteses tipo [esq]:id dois_pontos [dir]:id fecha_parenteses comando
   | {atrib} atrib ponto_final
   | {retorne} retorne exp? ponto_final
   | {bloco} bloco
   | {chamada} chamada ponto_final;
   
 var = 
     {id} id
   | {indexada} var abre_colchete exp fecha_colchete;
  
 exp = 
     {var} var
   | {chamada} chamada
   | {caractere} caractere
   | {booleano} booleano;
   | {ou} exp ou exp_ou
   | {exp_ou} exp_ou

 exp_ou =
     {e} exp_ou e exp_e
   | {exp_e} exp_e

 exp_e =
     {igual} exp_e igual exp_igual
   | {exp_igual} exp_igual

 exp_igual =
     {maior_menor} exp_igual operador_relacional exp_cmp
   | {exp_cmp} exp_cmp

 exp_cmp =
     {adicao_subtracao} exp_cmp mais_menos exp_termo
   | {exp_termo} exp_termo

 exp_termo =
     {multiplicacao_divisao} exp_termo mult_div exp_nao
   | {exp_nao} exp_nao

 exp_nao =
     {nao} nao exp_nao
   | {exp_fator} exp_fator

 exp_fator =
     {exp} abre_parenteses exp fecha_parenteses
   | {numero} numero

 operador_relacional =
     {menor_igual} menor_igual
   | {maior_igual} maior_igual
   | {menor} menor
   | {maior} maior

 mais_menos =
     {mais} mais
   | {menos} menos

 mult_div =
     {mult} mult
   | {div} div



 chamada = 
   id abre_parenteses lista_exp fecha_parenteses;
  
 lista_exp =
    {vazio}
  | {lista_exp} exp pipe_exp*;
 
 pipe_exp = 
   pipe exp;
	