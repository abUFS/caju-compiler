/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.analysis;

import caju.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAArProgramaAPrograma(AArProgramaAPrograma node);
    void caseAArDecVariavelADecVariavel(AArDecVariavelADecVariavel node);
    void caseAArListaNomesAListaNomes(AArListaNomesAListaNomes node);
    void caseAArVirgulaIdAVirgulaId(AArVirgulaIdAVirgulaId node);
    void caseAArDecFuncaoADecFuncao(AArDecFuncaoADecFuncao node);
    void caseAArParametrosAParametros(AArParametrosAParametros node);
    void caseAArParametrosVazioAParametros(AArParametrosVazioAParametros node);
    void caseAArParametroAParametro(AArParametroAParametro node);
    void caseAArTipoBaseATipo(AArTipoBaseATipo node);
    void caseAArTipoVetorATipo(AArTipoVetorATipo node);
    void caseAArNumeroATipoBase(AArNumeroATipoBase node);
    void caseAArCaractereATipoBase(AArCaractereATipoBase node);
    void caseAArBooleanoATipoBase(AArBooleanoATipoBase node);
    void caseAArIdAVar(AArIdAVar node);
    void caseAArIndexadaAVar(AArIndexadaAVar node);
    void caseAArOuAExp(AArOuAExp node);
    void caseAArEAExp(AArEAExp node);
    void caseAArIgualAExp(AArIgualAExp node);
    void caseAArMenorIgualAExp(AArMenorIgualAExp node);
    void caseAArMaiorIgualAExp(AArMaiorIgualAExp node);
    void caseAArMenorAExp(AArMenorAExp node);
    void caseAArMaiorAExp(AArMaiorAExp node);
    void caseAArMaisAExp(AArMaisAExp node);
    void caseAArMenosAExp(AArMenosAExp node);
    void caseAArMultAExp(AArMultAExp node);
    void caseAArDivAExp(AArDivAExp node);
    void caseAArNaoAExp(AArNaoAExp node);
    void caseAArVarAExp(AArVarAExp node);
    void caseAArChamadaAExp(AArChamadaAExp node);
    void caseAArNumeroAExp(AArNumeroAExp node);
    void caseAArCaractereAExp(AArCaractereAExp node);
    void caseAArBooleanoAExp(AArBooleanoAExp node);
    void caseAArStringAExp(AArStringAExp node);
    void caseAArChamadaAChamada(AArChamadaAChamada node);
    void caseAArListaExpAListaExp(AArListaExpAListaExp node);
    void caseAArListaExpVazioAListaExp(AArListaExpVazioAListaExp node);
    void caseAArComandoCasamAComando(AArComandoCasamAComando node);
    void caseAArComandoSemCasamAComando(AArComandoSemCasamAComando node);
    void caseAArSeAComandoCasam(AArSeAComandoCasam node);
    void caseAArSenaoAComandoCasam(AArSenaoAComandoCasam node);
    void caseAArEnquantoAComandoCasam(AArEnquantoAComandoCasam node);
    void caseAArParaAComandoCasam(AArParaAComandoCasam node);
    void caseAArParaCadaAComandoCasam(AArParaCadaAComandoCasam node);
    void caseAArSeSenaoAComandoSemCasam(AArSeSenaoAComandoSemCasam node);
    void caseAArAtribAComandoSemCasam(AArAtribAComandoSemCasam node);
    void caseAArRetorneAComandoSemCasam(AArRetorneAComandoSemCasam node);
    void caseAArBlocoAComandoSemCasam(AArBlocoAComandoSemCasam node);
    void caseAArChamadaAComandoSemCasam(AArChamadaAComandoSemCasam node);
    void caseAArBlocoABloco(AArBlocoABloco node);
    void caseAArAtribAAtrib(AArAtribAAtrib node);
    void caseAArListaAtribAListaAtrib(AArListaAtribAListaAtrib node);
    void caseAArVirgulaAtribAVirgulaAtrib(AArVirgulaAtribAVirgulaAtrib node);
    void caseAArTipoVazioATipoRetorno(AArTipoVazioATipoRetorno node);
    void caseAArTipoRetornoATipoRetorno(AArTipoRetornoATipoRetorno node);

    void caseTIgnorar(TIgnorar node);
    void caseTBaseCaractere(TBaseCaractere node);
    void caseTBaseNumero(TBaseNumero node);
    void caseTBaseBooleano(TBaseBooleano node);
    void caseTVetor(TVetor node);
    void caseTVazio(TVazio node);
    void caseTCaractere(TCaractere node);
    void caseTBooleano(TBooleano node);
    void caseTNumero(TNumero node);
    void caseTVetorUnidimensional(TVetorUnidimensional node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTComentLinha(TComentLinha node);
    void caseTComentBloco(TComentBloco node);
    void caseTEnquanto(TEnquanto node);
    void caseTPara(TPara node);
    void caseTParaCada(TParaCada node);
    void caseTSe(TSe node);
    void caseTSenao(TSenao node);
    void caseTRetorne(TRetorne node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMaior(TMaior node);
    void caseTMenor(TMenor node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTIgual(TIgual node);
    void caseTNao(TNao node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTAtribuir(TAtribuir node);
    void caseTPontoFinal(TPontoFinal node);
    void caseTVirgula(TVirgula node);
    void caseTAbreColchete(TAbreColchete node);
    void caseTFechaColchete(TFechaColchete node);
    void caseTSeta(TSeta node);
    void caseTAbreParenteses(TAbreParenteses node);
    void caseTFechaParenteses(TFechaParenteses node);
    void caseTPipe(TPipe node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
