/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.node;

import caju.analysis.*;

@SuppressWarnings("nls")
public final class AArParaCadaAComandoCasam extends PAComandoCasam
{
    private PATipo _aTipo_;
    private TId _esq_;
    private TId _dir_;
    private PAComando _aComando_;

    public AArParaCadaAComandoCasam()
    {
        // Constructor
    }

    public AArParaCadaAComandoCasam(
        @SuppressWarnings("hiding") PATipo _aTipo_,
        @SuppressWarnings("hiding") TId _esq_,
        @SuppressWarnings("hiding") TId _dir_,
        @SuppressWarnings("hiding") PAComando _aComando_)
    {
        // Constructor
        setATipo(_aTipo_);

        setEsq(_esq_);

        setDir(_dir_);

        setAComando(_aComando_);

    }

    @Override
    public Object clone()
    {
        return new AArParaCadaAComandoCasam(
            cloneNode(this._aTipo_),
            cloneNode(this._esq_),
            cloneNode(this._dir_),
            cloneNode(this._aComando_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArParaCadaAComandoCasam(this);
    }

    public PATipo getATipo()
    {
        return this._aTipo_;
    }

    public void setATipo(PATipo node)
    {
        if(this._aTipo_ != null)
        {
            this._aTipo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aTipo_ = node;
    }

    public TId getEsq()
    {
        return this._esq_;
    }

    public void setEsq(TId node)
    {
        if(this._esq_ != null)
        {
            this._esq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._esq_ = node;
    }

    public TId getDir()
    {
        return this._dir_;
    }

    public void setDir(TId node)
    {
        if(this._dir_ != null)
        {
            this._dir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dir_ = node;
    }

    public PAComando getAComando()
    {
        return this._aComando_;
    }

    public void setAComando(PAComando node)
    {
        if(this._aComando_ != null)
        {
            this._aComando_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aComando_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aTipo_)
            + toString(this._esq_)
            + toString(this._dir_)
            + toString(this._aComando_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aTipo_ == child)
        {
            this._aTipo_ = null;
            return;
        }

        if(this._esq_ == child)
        {
            this._esq_ = null;
            return;
        }

        if(this._dir_ == child)
        {
            this._dir_ = null;
            return;
        }

        if(this._aComando_ == child)
        {
            this._aComando_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aTipo_ == oldChild)
        {
            setATipo((PATipo) newChild);
            return;
        }

        if(this._esq_ == oldChild)
        {
            setEsq((TId) newChild);
            return;
        }

        if(this._dir_ == oldChild)
        {
            setDir((TId) newChild);
            return;
        }

        if(this._aComando_ == oldChild)
        {
            setAComando((PAComando) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
